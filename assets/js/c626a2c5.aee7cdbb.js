"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1585],{1433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=n(4848),a=n(8453);const i={},o=void 0,c={id:"Product Features/Flows/Flow Actions/Split By/Custom Expression",title:"Custom Expression",description:"### 2 minute read &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Intermediate",source:"@site/docs/3. Product Features/03. Flows/2. Flow Actions/Split By/01. Custom Expression.md",sourceDirName:"3. Product Features/03. Flows/2. Flow Actions/Split By",slug:"/Product Features/Flows/Flow Actions/Split By/Custom Expression",permalink:"/docs/docs/Product Features/Flows/Flow Actions/Split By/Custom Expression",draft:!1,unlisted:!1,editUrl:"https://github.com/glific/docs/tree/main/docs/3. Product Features/03. Flows/2. Flow Actions/Split By/01. Custom Expression.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manage profile",permalink:"/docs/docs/Product Features/Flows/Flow Actions/Manage profile"},next:{title:"Contact Field",permalink:"/docs/docs/Product Features/Flows/Flow Actions/Split By/Contact Field"}},r={},d=[{value:"<strong>2 minute read \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 <code>Intermediate</code></strong>",id:"2-minute-read---------------------------------------------------------intermediate",level:3},{value:"Splitting Responses based on Contact choices or Attribute values",id:"splitting-responses-based-on-contact-choices-or-attribute-values",level:2},{value:"Custom Expressions cheatsheet",id:"custom-expressions-cheatsheet",level:2},{value:"Syntax Examples",id:"syntax-examples",level:2},{value:"Advanced Feature Webinar",id:"advanced-feature-webinar",level:2}];function l(e){const t={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.h3,{id:"2-minute-read---------------------------------------------------------intermediate",children:(0,s.jsxs)(t.strong,{children:["2 minute read \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 ",(0,s.jsx)(t.code,{children:"Intermediate"})]})}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"splitting-responses-based-on-contact-choices-or-attribute-values",children:"Splitting Responses based on Contact choices or Attribute values"}),"\n",(0,s.jsx)(t.p,{children:"There may be situations wherein a flow you would want to send different responses to different contacts based on their choices."}),"\n",(0,s.jsxs)(t.p,{children:["You can use the ",(0,s.jsx)(t.code,{children:"Split by a custom expression"})," option to make that happen."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Split by a custom expression"})," uses a coding syntax to match the response received or profile attribute."]}),"\n",(0,s.jsxs)(t.p,{children:["The syntax will be like ",(0,s.jsx)(t.code,{children:"<%= if (Variable name  == 'String' / number ), do: 1, else: 0 %>"})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"custom-expressions-cheatsheet",children:"Custom Expressions cheatsheet"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Get today's date in IST\n",(0,s.jsx)(t.code,{children:'<%= Timex.today("Asia/Kolkata") |> Date.to_string() %>'})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Get today's date and time in IST\n",(0,s.jsx)(t.code,{children:'<%= DateTime.now!("Asia/Kolkata") |> DateTime.to_string() %>'})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Adding the date and time stamp"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Use case: @calendar.current_date does not add the time stamp. To capture the date and time. Ex start time of a flow and the end time of a flow, following custom expression can be used  ",(0,s.jsx)(t.code,{children:'<%= DateTime.now!("Asia/Kolkata") |> Calendar.strftime("%H:%M:%S") %>'})]}),"\n",(0,s.jsx)("img",{width:"654",alt:"Screenshot 2025-03-31 at 9 06 22\u202fPM",src:"https://github.com/user-attachments/assets/1b582df3-5c3a-44a0-99c7-d809d07bbea9"}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsx)(t.li,{children:"Calculating the time difference"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Use case: to calculator the time taken by a contact to complete the flow. Considering the pre-requisite that the start time and end time are captured at the flow level in separate variables, the difference can be calculated by using the following expression."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'<%= Time.diff(Time.from_iso8601!("@contact.fields.time_end"), Time.from_iso8601!("@contact.fields.time_start"), :second) %>'})}),"\n",(0,s.jsxs)(t.p,{children:["The above expression calculates the difference between @contact.fields.time_end and @contact.fields.time_start in seconds. And the screenshot below updates this difference to a contact variable @contact.fields.timer  using ",(0,s.jsx)(t.code,{children:"update the contact"})," node."]}),"\n",(0,s.jsx)("img",{width:"655",alt:"Screenshot 2025-03-31 at 9 06 53\u202fPM",src:"https://github.com/user-attachments/assets/45d0f3eb-e5f4-4f53-b6c7-8229abe51d4d"}),"\n",(0,s.jsxs)(t.ol,{start:"5",children:["\n",(0,s.jsx)(t.li,{children:"Doing calculations between dates"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Use case: Calculating the date difference between the present date and the a given date (ex batch start date or a date of onboarding the contact). Considering that @calendar.current_date is being used as the expression to store the batch start date at the time of onboarding."}),"\n",(0,s.jsx)(t.p,{children:"@calendar.current_date gets the date in the following format; D/0M/YYYY which translated to date without leading zero, month with a leading zero and full numeric year."}),"\n",(0,s.jsx)(t.p,{children:"This means 2nd january 2025 will be represented as 2/01/2025, and 11th Oct 2024 will be represented as 11/10/2024"}),"\n",(0,s.jsxs)(t.p,{children:["The following expression can then be used to calculate the difference in dates between any\n",(0,s.jsx)(t.code,{children:'<%= "@contact.fields.batch_start_date"|>Timex.parse!("{D}/{0M}/{YYYY}") |> then(&(Timex.diff(Timex.now(), &1, :day))) %>'})]}),"\n",(0,s.jsx)(t.p,{children:"In the screenshot, the expression is used to calculate the date difference and the value of this calculation is updated to a new flow result @results.datediff"}),"\n",(0,s.jsx)("img",{width:"609",alt:"Screenshot 2025-03-31 at 9 07 50\u202fPM",src:"https://github.com/user-attachments/assets/672afd83-b2a5-4f32-86eb-b83021927f31"}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"String concatenation function"})}),"\n",(0,s.jsxs)(t.p,{children:["Put two variables in the results field in the update contact node.\n",(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:"@results.Var1 @results.Var2"})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("img",{width:"640",alt:"Screenshot 2023-08-30 at 12 26 12 PM",src:"https://github.com/glific/docs/assets/16541548/7e6ab494-27ad-4dd7-91ed-ba790ac60bc6"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Contactenation of multiple strings or flow results or contact variables can be done by simply adding those values in the ",(0,s.jsx)(t.code,{children:"update the contact"})," or ",(0,s.jsx)(t.code,{children:"update the flow result"})," node."]}),"\n",(0,s.jsxs)(t.li,{children:["By simply writing ",(0,s.jsx)(t.code,{children:"Grade @results.grade.category ACP @contact.fields.s_acp "})," to update a contact field called ",(0,s.jsx)(t.code,{children:"present_grade_acp"}),"."]}),"\n",(0,s.jsx)(t.li,{children:"Suppose @results.grade.category contains the value 2 and @contact.fields.s_acp contains the value 4, then the the value of the @contact,fields.present_grade_acp is updated to  value of \u201cGrade 2 ACP 4\u201d when the following node is encountered"}),"\n"]}),"\n",(0,s.jsx)("img",{width:"609",alt:"Screenshot 2025-03-31 at 9 10 05\u202fPM",src:"https://github.com/user-attachments/assets/1b87245b-c734-4e32-bf7d-de42ded6e122"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Similarly, other example of concatenating the node is the following node which\nUpdates the value of @contact.fields.cumulative_acp"}),"\n",(0,s.jsx)(t.li,{children:"By adding a comma and the value contained in @contact.fields.present_grade_acp to the already existing values in @contact.fields.cumulative_acp"}),"\n",(0,s.jsx)(t.li,{children:"Suppose the @contact.fields.cumulative_acp is set to 0, and suppose the value of @contact.fields.present_grade_acp contains the value Grade 1 ACP 1, then after the node is encountered, the updated value of @contact.fields.cumulative_acp becomes \u201c0, Grade 2 ACP 1\u201d"}),"\n",(0,s.jsx)(t.li,{children:"In the next flow, if the @contact.fields.present_grade_acp contains the value Grade 1 ACP 2, then after encountering the same node, the value of @contact.fields.cumulative_acp is updated to \u20180, Grade 1 ACP 1, Grade 2 ACP 1\u2019"}),"\n",(0,s.jsx)(t.li,{children:"In this way, a contact variable can be used to store the history of progression/ paths taken by a contact."}),"\n"]}),"\n",(0,s.jsx)("img",{width:"600",alt:"Screenshot 2025-03-31 at 9 10 55\u202fPM",src:"https://github.com/user-attachments/assets/40e60fcc-a912-4197-aaee-0ade747ec73a"}),"\n",(0,s.jsxs)(t.ol,{start:"5",children:["\n",(0,s.jsx)(t.li,{children:"Converting a string to lowercase."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Any input variable can be converted to lowercase by using the following expression:\n",(0,s.jsx)(t.code,{children:"<%= String.downcase(\u201c@result.resultname\u201d) %>"}),"\nIn the above expression @result.resultname can be replaced with the string or the flow variable or the contact variable containing the string that needs to be converted to lowercase."]}),"\n",(0,s.jsx)("img",{width:"604",alt:"Screenshot 2025-03-31 at 9 14 06\u202fPM",src:"https://github.com/user-attachments/assets/83c8c265-64b6-4bb3-b5f5-5027df080f77"}),"\n",(0,s.jsx)(t.p,{children:"In the screenshot shared, two tasks are happening at once\nThe flow variable @results.flow_keyword.input is getting converted to the lowercase\nThe lowercase value of flow variable @results.flow_keyword.input is getting saved to the contact variable keyword."}),"\n",(0,s.jsx)(t.p,{children:"Use case: Same flow can be started using multiple keywords. The keyword entered by a contact is used to determine which partner org, city and school is the contact representing. This data is picked up from a separate google sheet maintained by the NGO. Thus reducing the step by the contact to share details like org, school name, city."}),"\n",(0,s.jsx)(t.h2,{id:"syntax-examples",children:"Syntax Examples"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Syntax to ",(0,s.jsx)(t.strong,{children:"check if contact belongs to collection 1 or collection 2"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'<%=\xa0if "collection 1" in @contact.in_groups, do: 1, else: if "collection 2" in @contact.in_groups, do: 2, else: 3 %>'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://user-images.githubusercontent.com/32592458/218255349-c0ac6af4-24b3-4ca5-b9c9-46bfb0230b5f.png",alt:"image"})}),"\n",(0,s.jsxs)(t.p,{children:["2 . Syntax to ",(0,s.jsx)(t.strong,{children:"check if the contact is registered"})," or not."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'<%=\xa0if "@contact.fields.is_registered" == "1" , do: 1, else:\xa00 %>'})}),"\n",(0,s.jsxs)(t.p,{children:["3 . Syntax to ",(0,s.jsx)(t.strong,{children:"check if the contact has opted-in"})," or not."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"<%= if @contact.optin_status == true, do: 1, else: 2%>"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://user-images.githubusercontent.com/32592458/218255356-a3df6b26-30a5-4d55-92cc-720397efa908.png",alt:"image"})}),"\n",(0,s.jsx)(t.p,{children:"Any variable that is created and saved for contact can be used to make decisions in Split by custom expression syntax"}),"\n",(0,s.jsx)(t.p,{children:"To use Split by expression needs a bit of coding to write the correct syntax. If you have exact requirements for what needs to be done and needs assistance, please ping us on discord, we will share the correct syntax for the requirement."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"advanced-feature-webinar",children:"Advanced Feature Webinar"}),"\n",(0,s.jsx)("iframe",{width:"800",height:"500",src:"https://www.youtube.com/embed/nl7n6l_LLec",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(6540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);